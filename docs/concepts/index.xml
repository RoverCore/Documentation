<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>RoverCore Docs – Concepts</title><link>/Documentation/docs/concepts/</link><description>Recent content in Concepts on RoverCore Docs</description><generator>Hugo -- gohugo.io</generator><atom:link href="/Documentation/docs/concepts/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Develop ASP.NET Core MVC apps</title><link>/Documentation/docs/concepts/developingapps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/Documentation/docs/concepts/developingapps/</guid><description>
&lt;blockquote>
&lt;p>The following text contains excerpts that are creative-commons licensed from Microsoft. The full article can be found &lt;a href="https://docs.microsoft.com/en-us/dotnet/architecture/modern-web-apps-azure/develop-asp-net-core-mvc-apps">here&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;p>ASP.NET Core is a cross-platform, open-source framework for building modern cloud-optimized web applications. ASP.NET Core apps are lightweight and modular, with built-in support for dependency injection, enabling greater testability and maintainability. Combined with MVC, which supports building modern web APIs in addition to view-based apps, ASP.NET Core is a powerful framework with which to build enterprise web applications.&lt;/p>
&lt;h2 id="mvc-and-razor-pages">MVC and Razor Pages&lt;/h2>
&lt;p>ASP.NET Core MVC offers many features that are useful for building web-based APIs and apps. The term MVC stands for &amp;ldquo;Model-View-Controller&amp;rdquo;, a UI pattern that breaks up the responsibilities of responding to user requests into several parts. In addition to following this pattern, you can also implement features in your ASP.NET Core apps as Razor Pages.&lt;/p>
&lt;p>Razor Pages are built into ASP.NET Core MVC, and use the same features for routing, model binding, filters, authorization, etc. However, instead of having separate folders and files for Controllers, Models, Views, etc. and using attribute-based routing, Razor Pages are placed in a single folder (&amp;quot;/Pages&amp;quot;), route based on their relative location in this folder, and handle requests with handlers instead of controller actions. As a result, when working with Razor Pages, all of the files and classes you need are typically colocated, not spread throughout the web project.&lt;/p>
&lt;p>When you create a new ASP.NET Core App, you should have a plan in mind for the kind of app you want to build. When creating a new project, in your IDE or using the &lt;code>dotnet new&lt;/code> CLI command, you will choose from several templates. The most common project templates are Empty, Web API, Web App, and Web App (Model-View-Controller). Although you can only make this decision when you first create a project, it&amp;rsquo;s not an irrevocable decision. The Web API project uses standard Model-View-Controller controllers – it just lacks Views by default. Likewise, the default Web App template uses Razor Pages, and so also lacks a Views folder. You can add a Views folder to these projects later to support view-based behavior. Web API and Model-View-Controller projects don&amp;rsquo;t include a Pages folder by default, but you can add one later to support Razor Pages-based behavior. You can think of these three templates as supporting three different kinds of default user interaction: data (web API), page-based, and view-based. However, you can mix and match any or all of these templates within a single project if you wish.&lt;/p>
&lt;h3 id="why-razor-pages">Why Razor Pages?&lt;/h3>
&lt;p>Razor Pages is the default approach for new web applications in Visual Studio. Razor Pages offers a simpler way of building page-based application features, such as non-SPA forms. Using controllers and views, it was common for applications to have very large controllers that worked with many different dependencies and view models and returned many different views. This resulted in more complexity and often resulted in controllers that didn&amp;rsquo;t follow the Single Responsibility Principle or Open/Closed Principles effectively. Razor Pages addresses this issue by encapsulating the server-side logic for a given logical &amp;ldquo;page&amp;rdquo; in a web application with its Razor markup. A Razor Page that has no server-side logic can only consist of a Razor file (for instance, &amp;ldquo;Index.cshtml&amp;rdquo;). However, most non-trivial Razor Pages will have an associated page model class, which by convention is named the same as the Razor file with a &amp;ldquo;.cs&amp;rdquo; extension (for example, &amp;ldquo;Index.cshtml.cs&amp;rdquo;).&lt;/p>
&lt;p>A Razor Page&amp;rsquo;s page model combines the responsibilities of an MVC controller and a viewmodel. Instead of handling requests with controller action methods, page model handlers like &amp;ldquo;OnGet()&amp;rdquo; are executed, rendering their associated page by default. Razor Pages simplifies the process of building individual pages in an ASP.NET Core app, while still providing all the architectural features of ASP.NET Core MVC. They&amp;rsquo;re a good default choice for new page-based functionality.&lt;/p>
&lt;h3 id="when-to-use-mvc">When to use MVC&lt;/h3>
&lt;p>If you&amp;rsquo;re building web APIs, the MVC pattern makes more sense than trying to use Razor Pages. If your project will only expose web API endpoints, you should ideally start from the Web API project template. Otherwise, it&amp;rsquo;s easy to add controllers and associated API endpoints to any ASP.NET Core app. Use the view-based MVC approach if you&amp;rsquo;re migrating an existing application from ASP.NET MVC 5 or earlier to ASP.NET Core MVC and you want to do so with the least amount of effort. Once you&amp;rsquo;ve made the initial migration, you can evaluate whether it makes sense to adopt Razor Pages for new features or even as a wholesale migration.&lt;/p>
&lt;p>Whether you choose to build your web app using Razor Pages or MVC views, your app will have similar performance and will include support for dependency injection, filters, model binding, validation, and so on.&lt;/p>
&lt;h2 id="working-with-dependencies">Working with dependencies&lt;/h2>
&lt;p>ASP.NET Core has built-in support for and internally makes use of a technique known as &lt;a href="../../aspnet/core/fundamentals/dependency-injection">dependency injection&lt;/a>. Dependency injection is a technique that enables loose coupling between different parts of an application. Looser coupling is desirable because it makes it easier to isolate parts of the application, allowing for testing or replacement. It also makes it less likely that a change in one part of the application will have an unexpected impact somewhere else in the application. Dependency injection is based on the dependency inversion principle, and is often key to achieving the open/closed principle. When evaluating how your application works with its dependencies, beware of the &lt;a href="https://deviq.com/static-cling/">static cling&lt;/a> code smell, and remember the aphorism &amp;ldquo;&lt;a href="https://ardalis.com/new-is-glue">new is glue&lt;/a>.&amp;rdquo;&lt;/p>
&lt;p>Static cling occurs when your classes make calls to static methods, or access static properties, which have side effects or dependencies on infrastructure. For example, if you have a method that calls a static method, which in turn writes to a database, your method is tightly coupled to the database. Anything that breaks that database call will break your method. Testing such methods is notoriously difficult, since such tests either require commercial mocking libraries to mock the static calls, or can only be tested with a test database in place. Static calls that don&amp;rsquo;t have any dependence on infrastructure, especially those calls that are completely stateless, are fine to call and have no impact on coupling or testability (beyond coupling code to the static call itself).&lt;/p>
&lt;p>Many developers understand the risks of static cling and global state, but will still tightly couple their code to specific implementations through direct instantiation. &amp;ldquo;New is glue&amp;rdquo; is meant to be a reminder of this coupling, and not a general condemnation of the use of the &lt;code>new&lt;/code> keyword. Just as with static method calls, new instances of types that have no external dependencies typically do not tightly couple code to implementation details or make testing more difficult. But each time a class is instantiated, take just a brief moment to consider whether it makes sense to hard-code that specific instance in that particular location, or if it would be a better design to request that instance as a dependency.&lt;/p>
&lt;h3 id="declare-your-dependencies">Declare your dependencies&lt;/h3>
&lt;p>ASP.NET Core is built around having methods and classes declare their dependencies, requesting them as arguments. ASP.NET applications are typically set up in &lt;em>Program.cs&lt;/em> or in a &lt;code>Startup&lt;/code> class.&lt;/p>
&lt;blockquote>
&lt;p>&lt;div class="mb-2 align-middle">
&lt;svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-checkbox me-1" style="color: #805D93; margin-bottom: 0.08rem; stroke-width: 2.0" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
&lt;path stroke="none" d="M0 0h24v24H0z" fill="none"/>
&lt;polyline points="9 11 12 14 20 6" />
&lt;path d="M20 12v6a2 2 0 0 1 -2 2h-12a2 2 0 0 1 -2 -2v-12a2 2 0 0 1 2 -2h9" />
&lt;/svg>
&lt;div class="d-inline-block" style="font-weight: 900; font-size: 1rem; color: #805D93">Note&lt;/div>
&lt;/div>
Configuring apps completely in &lt;em>Program.cs&lt;/em> is the default approach for .NET 6 and Visual Studio 2022 apps. Project templates have been updated to help you get started with this new approach. ASP.NET Core projects can still use a &lt;code>Startup&lt;/code> class, if desired.&lt;/p>
&lt;/blockquote>
&lt;h4 id="configure-services-in-_programcs_">Configure services in &lt;em>Program.cs&lt;/em>&lt;/h4>
&lt;p>For very simple apps, you can wire up dependencies directly in &lt;em>Program.cs&lt;/em> file using a &lt;code>WebApplicationBuilder&lt;/code>. Once all needed services have been added, the builder is used to create the app.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">builder&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">WebApplication&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">CreateBuilder&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">args&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Add services to the container.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">builder&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Services&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">AddRazorPages&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">app&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">builder&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Build&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="configure-services-in-_startupcs_">Configure services in &lt;em>Startup.cs&lt;/em>&lt;/h4>
&lt;p>The &lt;em>Startup.cs&lt;/em> is itself configured to support dependency injection at several points. If you&amp;rsquo;re using a &lt;code>Startup&lt;/code> class, you can give it a constructor and it can request dependencies through it, like so:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">Startup&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#000">Startup&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">IHostingEnvironment&lt;/span> &lt;span style="color:#000">env&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">builder&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">ConfigurationBuilder&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SetBasePath&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">env&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ContentRootPath&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">AddJsonFile&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;appsettings.json&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">optional&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">reloadOnChange&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">AddJsonFile&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">$&amp;#34;appsettings.{env.EnvironmentName}.json&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">optional&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>Startup&lt;/code> class is interesting in that there are no explicit type requirements for it. It doesn&amp;rsquo;t inherit from a special &lt;code>Startup&lt;/code> base class, nor does it implement any particular interface. You can give it a constructor, or not, and you can specify as many parameters on the constructor as you want. When the web host you&amp;rsquo;ve configured for your application starts, it will call the &lt;code>Startup&lt;/code> class (if you&amp;rsquo;ve told it to use one), and will use dependency injection to populate any dependencies the &lt;code>Startup&lt;/code> class requires. Of course, if you request parameters that aren&amp;rsquo;t configured in the services container used by ASP.NET Core, you&amp;rsquo;ll get an exception, but as long as you stick to dependencies the container knows about, you can request anything you want.&lt;/p>
&lt;p>Dependency injection is built into your ASP.NET Core apps right from the start, when you create the Startup instance. It doesn&amp;rsquo;t stop there for the Startup class. You can also request dependencies in the &lt;code>Configure&lt;/code> method:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">Configure&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">IApplicationBuilder&lt;/span> &lt;span style="color:#000">app&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">IHostingEnvironment&lt;/span> &lt;span style="color:#000">env&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">ILoggerFactory&lt;/span> &lt;span style="color:#000">loggerFactory&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The ConfigureServices method is the exception to this behavior; it must take just one parameter of type &lt;code>IServiceCollection&lt;/code>. It doesn&amp;rsquo;t really need to support dependency injection, since on the one hand it is responsible for adding objects to the services container, and on the other it has access to all currently configured services via the IServiceCollection parameter. Thus, you can work with dependencies defined in the ASP.NET Core services collection in every part of the &lt;code>Startup&lt;/code> class, either by requesting the needed service as a parameter or by working with the &lt;code>IServiceCollection&lt;/code> in &lt;code>ConfigureServices&lt;/code>.&lt;/p>
&lt;blockquote>
&lt;p>&lt;div class="mb-2 align-middle">
&lt;svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-checkbox me-1" style="color: #805D93; margin-bottom: 0.08rem; stroke-width: 2.0" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
&lt;path stroke="none" d="M0 0h24v24H0z" fill="none"/>
&lt;polyline points="9 11 12 14 20 6" />
&lt;path d="M20 12v6a2 2 0 0 1 -2 2h-12a2 2 0 0 1 -2 -2v-12a2 2 0 0 1 2 -2h9" />
&lt;/svg>
&lt;div class="d-inline-block" style="font-weight: 900; font-size: 1rem; color: #805D93">Note&lt;/div>
&lt;/div>
If you need to ensure certain services are available to your &lt;code>Startup&lt;/code> class, you can configure them using an &lt;code>IWebHostBuilder&lt;/code> and its &lt;code>ConfigureServices&lt;/code> method inside the &lt;code>CreateDefaultBuilder&lt;/code> call.&lt;/p>
&lt;/blockquote>
&lt;p>The Startup class is a model for how you should structure other parts of your ASP.NET Core application, from Controllers to Middleware to Filters to your own Services. In each case, you should follow the &lt;a href="https://deviq.com/explicit-dependencies-principle/">Explicit Dependencies Principle&lt;/a>, requesting your dependencies rather than directly creating them, and leveraging dependency injection throughout your application. Be careful of where and how you directly instantiate implementations, especially services and objects that work with infrastructure or have side effects. Prefer working with abstractions defined in your application core and passed in as arguments to hardcoding references to specific implementation types.&lt;/p>
&lt;h2 id="structuring-the-application">Structuring the application&lt;/h2>
&lt;p>Monolithic applications typically have a single entry point. In the case of an ASP.NET Core web application, the entry point will be the ASP.NET Core web project. However, that doesn&amp;rsquo;t mean the solution should consist of just a single project. It&amp;rsquo;s useful to break up the application into different layers in order to follow separation of concerns. Once broken up into layers, it&amp;rsquo;s helpful to go beyond folders to separate projects, which can help achieve better encapsulation. The best approach to achieve these goals with an ASP.NET Core application is a variation of the Clean Architecture discussed in chapter 5. Following this approach, the application&amp;rsquo;s solution will comprise separate libraries for the UI, Infrastructure, and ApplicationCore.&lt;/p>
&lt;p>In addition to these projects, separate test projects are included as well (Testing is discussed in Chapter 9).&lt;/p>
&lt;p>The application&amp;rsquo;s object model and interfaces should be placed in the ApplicationCore project. This project will have as few dependencies as possible (and none on specific infrastructure concerns), and the other projects in the solution will reference it. Business entities that need to be persisted are defined in the ApplicationCore project, as are services that do not directly depend on infrastructure.&lt;/p>
&lt;p>Implementation details, such as how persistence is performed or how notifications might be sent to a user, are kept in the Infrastructure project. This project will reference implementation-specific packages such as Entity Framework Core, but should not expose details about these implementations outside of the project. Infrastructure services and repositories should implement interfaces that are defined in the ApplicationCore project, and its persistence implementations are responsible for retrieving and storing entities defined in ApplicationCore.&lt;/p>
&lt;p>The ASP.NET Core UI project is responsible for any UI level concerns, but should not include business logic or infrastructure details. In fact, ideally it shouldn&amp;rsquo;t even have a dependency on the Infrastructure project, which will help ensure no dependency between the two projects is introduced accidentally. This can be achieved using a third-party DI container like Autofac, which allows you to define DI rules in Module classes in each project.&lt;/p>
&lt;p>Another approach to decoupling the application from implementation details is to have the application call microservices, perhaps deployed in individual Docker containers. This provides even greater separation of concerns and decoupling than leveraging DI between two projects, but has additional complexity.&lt;/p>
&lt;h3 id="feature-organization">Feature organization&lt;/h3>
&lt;p>By default, ASP.NET Core applications organize their folder structure to include Controllers and Views, and frequently ViewModels. Client-side code to support these server-side structures is typically stored separately in the wwwroot folder. However, large applications may encounter problems with this organization, since working on any given feature often requires jumping between these folders. This gets more and more difficult as the number of files and subfolders in each folder grows, resulting in a great deal of scrolling through Solution Explorer. One solution to this problem is to organize application code by &lt;em>feature&lt;/em> instead of by file type. This organizational style is typically referred to as feature folders or &lt;a href="../../archive/msdn-magazine/2016/september/asp-net-core-feature-slices-for-asp-net-core-mvc">feature slices&lt;/a> (see also: &lt;a href="https://deviq.com/vertical-slices/">Vertical Slices&lt;/a>).&lt;/p>
&lt;p>ASP.NET Core MVC supports Areas for this purpose. Using areas, you can create separate sets of Controllers and Views folders (as well as any associated models) in each Area folder.&lt;/p>
&lt;p>When using Areas, you must use attributes to decorate your controllers with the name of the area to which they belong:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#c4a000">[Area(&amp;#34;Catalog&amp;#34;)]&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">HomeController&lt;/span>
&lt;span style="color:#000;font-weight:bold">{}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: MVC - Model View Controller</title><link>/Documentation/docs/concepts/mvc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/Documentation/docs/concepts/mvc/</guid><description>
&lt;h2 id="what-is-a-model-view-controller">What is a Model View Controller?&lt;/h2>
&lt;p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut pharetra justo vitae risus suscipit, sed ornare purus faucibus. Sed aliquet orci in nulla varius, eu blandit orci euismod. Suspendisse sit amet mollis justo. Ut accumsan mi elit, quis commodo turpis fermentum nec. Fusce fermentum dictum mollis. Nam vel odio consequat, faucibus erat laoreet, pulvinar urna. Etiam mi eros, aliquam ac quam non, auctor feugiat sem. Vivamus vestibulum purus sed ligula dictum consequat.&lt;/p>
&lt;p>Ut non turpis nisl. Vestibulum aliquet vel velit et ultricies. Integer sem elit, convallis in commodo eu, efficitur sit amet risus. In bibendum lorem non felis lacinia efficitur. Quisque imperdiet fringilla pretium. Pellentesque sodales quam mi, eu finibus ex pulvinar quis. Sed a finibus diam. Pellentesque ultrices non purus vel vehicula. Cras eget massa ut lectus molestie laoreet. Suspendisse rutrum nisi at laoreet vulputate.&lt;/p>
&lt;p>Aenean dui lectus, tincidunt eget mi ut, eleifend semper nunc. Suspendisse in sodales ligula, vitae auctor augue. Phasellus pellentesque eleifend auctor. Ut at eros odio. Aenean facilisis pretium sem, nec porttitor eros maximus dapibus. Aliquam erat volutpat. Ut a nisl tortor. Phasellus vehicula ac lacus in elementum. Nam nibh purus, hendrerit id vulputate sit amet, blandit id quam. Aenean cursus erat nisl, id maximus mauris ornare sed. Sed finibus aliquet imperdiet. Praesent lobortis sapien eget metus feugiat, ac pellentesque est porttitor. Donec congue sit amet lacus eu tempor.&lt;/p>
&lt;p>Aenean mattis mi ut libero tempor, at ultricies sapien sagittis. Nulla elementum, orci ut feugiat ornare, ante neque elementum nulla, quis ultricies metus lacus non elit. Mauris ante dolor, pulvinar in lacus quis, gravida bibendum mauris. Donec non dolor erat. Phasellus nec aliquet turpis, et condimentum nisi. Quisque a euismod arcu. Fusce erat tortor, ultrices imperdiet posuere non, posuere non ligula. Fusce rhoncus faucibus est eget consequat. Cras ut erat lorem. Donec vel vehicula risus. Praesent ut leo mauris.&lt;/p>
&lt;p>Aliquam erat volutpat. Duis molestie est molestie erat dictum, id aliquam est vehicula. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. In sit amet suscipit augue. Cras mattis quam in nisl porttitor, a scelerisque dolor luctus. Cras non nisi ac dui scelerisque tempus in in erat. Quisque sit amet mi tincidunt, faucibus nisl luctus, sodales nunc. Ut quis ligula congue, faucibus nibh nec, sollicitudin enim. Suspendisse at nulla in justo molestie convallis vel vel sapien. Donec pharetra pellentesque massa, ut auctor est. Donec lacinia dictum facilisis. Aenean iaculis efficitur leo vel dictum. Proin malesuada nisi dictum luctus eleifend. In rhoncus dolor metus, at pretium velit faucibus fermentum. Donec venenatis congue ligula, sit amet elementum mi porttitor a. Morbi non rutrum lorem.&lt;/p></description></item><item><title>Docs: Layered Architecture</title><link>/Documentation/docs/concepts/layeredarchitecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/Documentation/docs/concepts/layeredarchitecture/</guid><description>
&lt;h2 id="what-is-a-layered-architecture">What is a layered architecture?&lt;/h2>
&lt;p>As your projects become larger it becomes helpful to break the project into parts based on responsibilities or concerns. This idea of separating pieces of your project from one another makes it ultimately easier to test your software and ensure that it is working as you would expect. Just like you wouldn’t want to write overly lengthy methods for that very same reason, we want to avoid single projects that take on too much responsibility for the workload of the application. This separation involves splitting the codebase into multiple projects which we will refer to as &lt;em>layers&lt;/em>.&lt;/p>
&lt;p>There are a number of advantages to using layers:&lt;/p>
&lt;ul>
&lt;li>Easier to work with in teams as individuals can focus on distinct layers&lt;/li>
&lt;li>Simplifies the process of understanding a codebase as each layer is isolated from each other and classes are typically grouped together by responsibility&lt;/li>
&lt;li>Testing is easier&lt;/li>
&lt;/ul>
&lt;p>There are also disadvantages, but for now we will focus on the rationale behind this framework.&lt;/p>
&lt;h2 id="tiered-architecture">Tiered Architecture&lt;/h2>
&lt;p>If you do enough searching you’ll quickly come across a number of ideas on how large software projects should be organized. Some of the most common approaches to software architecture for ASP.NET projects include:&lt;/p>
&lt;ul>
&lt;li>Tiered Architecture&lt;/li>
&lt;li>Onion Architecture&lt;/li>
&lt;li>Hexagonal Architecture&lt;/li>
&lt;li>Clean Architecture&lt;/li>
&lt;li>Vertical Slice Architecture&lt;/li>
&lt;/ul>
&lt;p>RoverCore is organized as an Tiered Architecture but in many of the above architectures there is a clear separation of what each layer is responsible for. The project itself is organized into three layers with distinct responsibilities and is intended to help you begin the process of understanding how to work with multi-project web applications. As you grow in your understanding of ASP.NET you may decide to add additional layers as your project grows in scope. You may also make stricter decisions on how to isolate the responsibilities of each layer. For example, you may decide to avoid making any direct calls to Entity Framework code in the Infrastructure layer from the Web layer in the chance that you want to swap out EF for something else. For now, these layers can make it easier to reuse your code, as one layer may share much of the code you might reuse in an entirely different project.&lt;/p>
&lt;img src="../../docs/concepts/layeredarchitecture.svg" width="600"/>
&lt;p>The organization for RoverCore consists of three tiers (or layers):&lt;/p>
&lt;ul>
&lt;li>Presentation&lt;/li>
&lt;li>Infrastructure&lt;/li>
&lt;li>Core&lt;/li>
&lt;/ul>
&lt;p>As you see with the above diagram, the arrows always point inward towards the core. This is because each layer depends on an inner layer to function. The Core layer is intended to be as free of dependencies as possible as it is typical that all projects will depend on the Core layer.&lt;/p>
&lt;h3 id="presentation-layer">Presentation Layer&lt;/h3>
&lt;p>The presentation layer is closest to the end user, and contains the actual user interface they have to interact with your application. Whether the interface is html-based, an API, or even a mobile app, there are a myriad of ways that your data can be presented to the user.&lt;/p>
&lt;p>Ideally you would not place a lot of the business logic (decisions about what happens to data when it is stored or outputted) in this layer, but as a beginner it may be easier for you to begin your journey placing these coding decisions in your controllers. As you progress you may decide to push business logic to another layer entirely.&lt;/p>
&lt;p>Presentation Layer types&lt;/p>
&lt;ul>
&lt;li>Controllers&lt;/li>
&lt;li>Custom Filters&lt;/li>
&lt;li>Custom Middleware&lt;/li>
&lt;li>Views&lt;/li>
&lt;li>ViewModels&lt;/li>
&lt;li>Startup&lt;/li>
&lt;/ul>
&lt;h3 id="infrastructure-layer">Infrastructure Layer&lt;/h3>
&lt;p>The Infrastructure project typically includes data access implementations. In a typical ASP.NET Core web application, these implementations include the Entity Framework (EF) DbContext, any EF Core Migration objects that have been defined, and data access implementation classes. The most common way to abstract data access implementation code is through the use of the &lt;a href="https://deviq.com/design-patterns/repository-pattern">Repository design pattern&lt;/a>.&lt;/p>
&lt;p>The Infrastructure layer contains supporting services for the Presentation layer. This includes services such as:&lt;/p>
&lt;ul>
&lt;li>Database&lt;/li>
&lt;li>Cache&lt;/li>
&lt;li>Logging&lt;/li>
&lt;li>Email&lt;/li>
&lt;li>Templates&lt;/li>
&lt;li>Configuration&lt;/li>
&lt;/ul>
&lt;p>In many of the above architectures you would typically create services that provide a way to manipulate the data entities stored in the database in the Infrastructure layer. The business logic itself would typically be put into a fourth project (typically named Application) and these data manipulation services would be injected into any Application layer service that might need it through dependency injection.&lt;/p>
&lt;p>For this project, you can decide what you want to do. The beginning approach would be to simply add any supporting services your application needs inside the Infrastructure project. The services you create in Infrastructure can then be used in any controller in the web project that you want.&lt;/p>
&lt;h3 id="core-layer">Core Layer&lt;/h3>
&lt;p>The core layer includes projects (like Domain) that have no dependencies on the other application layers. The core holds entities, services, and interfaces. These interfaces include abstractions for operations that will be performed using Infrastructure, such as data access, file system access, network calls, etc. Sometimes services or interfaces defined at this layer will need to work with non-entity types that have no dependencies on UI or Infrastructure. These can be defined as simple Data Transfer Objects (DTOs).&lt;/p>
&lt;p>Application Core types&lt;/p>
&lt;ul>
&lt;li>Entities (business model classes that are persisted)&lt;/li>
&lt;li>Aggregates (groups of entities)&lt;/li>
&lt;li>Interfaces&lt;/li>
&lt;li>Domain Services&lt;/li>
&lt;li>Specifications&lt;/li>
&lt;li>Custom Exceptions and Guard Clauses&lt;/li>
&lt;li>Domain Events and Handlers&lt;/li>
&lt;/ul>
&lt;h2 id="references">References&lt;/h2>
&lt;blockquote>
&lt;p>The preceding text contains excerpts that are creative-commons licensed from Microsoft. The full article can be found &lt;a href="https://docs.microsoft.com/en-us/dotnet/architecture/modern-web-apps-azure/common-web-application-architectures">here&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;h2 id="more-reading">More Reading&lt;/h2>
&lt;p>&lt;a href="https://docs.microsoft.com/en-us/dotnet/architecture/modern-web-apps-azure/common-web-application-architectures">Common Web Application Architectures&lt;/a>&lt;/p></description></item><item><title>Docs: Authentication</title><link>/Documentation/docs/concepts/authentication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/Documentation/docs/concepts/authentication/</guid><description>
&lt;h2 id="authentication-overview">Authentication Overview&lt;/h2>
&lt;p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut pharetra justo vitae risus suscipit, sed ornare purus faucibus. Sed aliquet orci in nulla varius, eu blandit orci euismod. Suspendisse sit amet mollis justo. Ut accumsan mi elit, quis commodo turpis fermentum nec. Fusce fermentum dictum mollis. Nam vel odio consequat, faucibus erat laoreet, pulvinar urna. Etiam mi eros, aliquam ac quam non, auctor feugiat sem. Vivamus vestibulum purus sed ligula dictum consequat.&lt;/p>
&lt;h2 id="aspnet-authentication-providers">ASP.NET Authentication Providers&lt;/h2>
&lt;p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut pharetra justo vitae risus suscipit, sed ornare purus faucibus. Sed aliquet orci in nulla varius, eu blandit orci euismod. Suspendisse sit amet mollis justo. Ut accumsan mi elit, quis commodo turpis fermentum nec. Fusce fermentum dictum mollis. Nam vel odio consequat, faucibus erat laoreet, pulvinar urna. Etiam mi eros, aliquam ac quam non, auctor feugiat sem. Vivamus vestibulum purus sed ligula dictum consequat.&lt;/p>
&lt;h3 id="aspnet-core-identity">ASP.NET Core Identity&lt;/h3>
&lt;p>Aenean dui lectus, tincidunt eget mi ut, eleifend semper nunc. Suspendisse in sodales ligula, vitae auctor augue. Phasellus pellentesque eleifend auctor. Ut at eros odio. Aenean facilisis pretium sem, nec porttitor eros maximus dapibus. Aliquam erat volutpat. Ut a nisl tortor. Phasellus vehicula ac lacus in elementum. Nam nibh purus, hendrerit id vulputate sit amet, blandit id quam. Aenean cursus erat nisl, id maximus mauris ornare sed. Sed finibus aliquet imperdiet. Praesent lobortis sapien eget metus feugiat, ac pellentesque est porttitor. Donec congue sit amet lacus eu tempor.&lt;/p>
&lt;p>Aenean mattis mi ut libero tempor, at ultricies sapien sagittis. Nulla elementum, orci ut feugiat ornare, ante neque elementum nulla, quis ultricies metus lacus non elit. Mauris ante dolor, pulvinar in lacus quis, gravida bibendum mauris. Donec non dolor erat. Phasellus nec aliquet turpis, et condimentum nisi. Quisque a euismod arcu. Fusce erat tortor, ultrices imperdiet posuere non, posuere non ligula. Fusce rhoncus faucibus est eget consequat. Cras ut erat lorem. Donec vel vehicula risus. Praesent ut leo mauris.&lt;/p>
&lt;p>Aliquam erat volutpat. Duis molestie est molestie erat dictum, id aliquam est vehicula. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. In sit amet suscipit augue. Cras mattis quam in nisl porttitor, a scelerisque dolor luctus. Cras non nisi ac dui scelerisque tempus in in erat. Quisque sit amet mi tincidunt, faucibus nisl luctus, sodales nunc. Ut quis ligula congue, faucibus nibh nec, sollicitudin enim. Suspendisse at nulla in justo molestie convallis vel vel sapien. Donec pharetra pellentesque massa, ut auctor est. Donec lacinia dictum facilisis. Aenean iaculis efficitur leo vel dictum. Proin malesuada nisi dictum luctus eleifend. In rhoncus dolor metus, at pretium velit faucibus fermentum. Donec venenatis congue ligula, sit amet elementum mi porttitor a. Morbi non rutrum lorem.&lt;/p>
&lt;h3 id="google-facebook-twitter-authentication">Google, Facebook, Twitter Authentication&lt;/h3>
&lt;p>&lt;a href="https://docs.microsoft.com/en-us/aspnet/core/security/authentication/social/">https://docs.microsoft.com/en-us/aspnet/core/security/authentication/social/&lt;/a>&lt;/p>
&lt;h3 id="jwt-json-web-token">JWT (JSON Web token)&lt;/h3>
&lt;p>Ut non turpis nisl. Vestibulum aliquet vel velit et ultricies. Integer sem elit, convallis in commodo eu, efficitur sit amet risus. In bibendum lorem non felis lacinia efficitur. Quisque imperdiet fringilla pretium. Pellentesque sodales quam mi, eu finibus ex pulvinar quis. Sed a finibus diam. Pellentesque ultrices non purus vel vehicula. Cras eget massa ut lectus molestie laoreet. Suspendisse rutrum nisi at laoreet vulputate.&lt;/p>
&lt;h3 id="other-third-party-external-providers">Other Third-Party External Providers&lt;/h3>
&lt;p>&lt;a href="https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers">https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers&lt;/a>&lt;/p></description></item><item><title>Docs: Authentication</title><link>/Documentation/docs/concepts/identity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/Documentation/docs/concepts/identity/</guid><description>
&lt;h2 id="identity">Identity&lt;/h2>
&lt;h2 id="references">References&lt;/h2></description></item><item><title>Docs: DTO - Data Transfer Objects</title><link>/Documentation/docs/concepts/dto/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/Documentation/docs/concepts/dto/</guid><description>
&lt;h2 id="what-are-dtos">What are DTOs?&lt;/h2>
&lt;p>A data transfer object is a class that’s used for public display of another object in the app. A DTO makes a class more secure by hiding sensitive data.&lt;/p>
&lt;h2 id="advantages-of-using-dtos-over-raw-entities">Advantages of using DTOs over raw entities&lt;/h2>
&lt;p>A layer of DTOs isolates the domain model from the presentation, resulting in both loose coupling and optimized data transfer. In loose coupling, you can change one service without changing the other by reducing interdependencies. If DTOs are used, a change in the requirements that forces a move to a different amount of data doesn&amp;rsquo;t have any impact on the service layer or even the domain.&lt;/p>
&lt;h2 id="what-is-overposting">What is overposting?&lt;/h2>
&lt;p>Overposting is a type of cyber attack that targets websites. More specifically, overposting targets controllers that expect an input from a user, but have other variables that are intentionally hidden from the user. For example, if a model has an “IsAdmin” variable that limits what a user can and cannot do, a hacker who knows this information can manually add an extra field to an input that would allow them to change the “IsAdmin” variable.&lt;/p>
&lt;h2 id="how-is-overposting-prevented">How is overposting prevented?&lt;/h2>
&lt;p>Take a look at an example set of code by &lt;a href="https://www.hanselman.com/blog/aspnet-overpostingmass-assignment-model-binding-security">Scott Hanselmen&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">Person&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">ID&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#204a87;font-weight:bold">get&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">set&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000">First&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#204a87;font-weight:bold">get&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">set&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000">Last&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#204a87;font-weight:bold">get&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">set&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">bool&lt;/span> &lt;span style="color:#000">IsAdmin&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#204a87;font-weight:bold">get&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">set&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#c4a000">[HttpPost]&lt;/span>
&lt;span style="color:#c4a000">[ValidateAntiForgeryToken]&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">async&lt;/span> &lt;span style="color:#000">Task&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">IActionResult&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">Create&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Person&lt;/span> &lt;span style="color:#000">person&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp"> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ModelState&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">IsValid&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#0000cf;font-weight:bold">_&lt;/span>&lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Add&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">person&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">await&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">_&lt;/span>&lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SaveChangesAsync&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">RedirectToAction&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Index&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">View&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">person&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here we see an entity and a corresponding action that accepts the entity as a parameter. Let&amp;rsquo;s say that the controller only wants the “First” and “Last” variables to be gathered from an input. A hacker can very easily add another field to an input that allows them to edit either the “ID” or the “IsAdmin” field. Now, look at the same code again but this time it is using binding.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#c4a000">[HttpPost]&lt;/span>
&lt;span style="color:#c4a000">[ValidateAntiForgeryToken]&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">async&lt;/span> &lt;span style="color:#000">Task&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">IActionResult&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">Create&lt;/span>&lt;span style="color:#000;font-weight:bold">([&lt;/span>&lt;span style="color:#000">Bind&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;First,Last&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)]&lt;/span> &lt;span style="color:#000">Person&lt;/span> &lt;span style="color:#000">person&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ModelState&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">IsValid&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#0000cf;font-weight:bold">_&lt;/span>&lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Add&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">person&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">await&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">_&lt;/span>&lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SaveChangesAsync&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">RedirectToAction&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Index&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">View&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">person&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now the action has bound the desired variables to &amp;ldquo;person&amp;rdquo;. This means that the action will only accept inputs that create either the “First” or “Last” variables and will not take any inputs from anything else. This makes the other variables such as “IsAdmin” completely inaccessible to hackers.&lt;/p>
&lt;h2 id="notes-from-microsoft">Notes from Microsoft&lt;/h2>
&lt;p>Microsoft recognizes DTOs as being superior to binding in terms of security. Take note of these resources for more information on DTOs and their security in terms of overposting: &lt;a href="https://docs.microsoft.com/en-us/aspnet/web-api/overview/data/using-web-api-with-entity-framework/part-5">Create Data Transfer Objects&lt;/a>, &lt;a href="https://docs.microsoft.com/en-us/aspnet/core/data/ef-mvc/crud?view=aspnetcore-6.0#security-note-about-overposting">Microsoft Security note about Overposting&lt;/a>.&lt;/p>
&lt;h2 id="examples">Examples&lt;/h2>
&lt;p>Below is an example on a class and a corresponding DTO that limits what parts of the class are visible. For an example, of regular binding see the “&lt;strong>How is overposting prevented?&lt;/strong>” section of this document.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">User&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#000">String&lt;/span> &lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#000">String&lt;/span> &lt;span style="color:#000">name&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#000">String&lt;/span> &lt;span style="color:#000">password&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#000">List&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">Role&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">roles&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#000">User&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">String&lt;/span> &lt;span style="color:#000">name&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">String&lt;/span> &lt;span style="color:#000">password&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">List&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">Role&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">roles&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">name&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">Objects&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">requireNonNull&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">password&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">encrypt&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">password&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">roles&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">Objects&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">requireNonNull&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">roles&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Getters and Setters
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000">String&lt;/span> &lt;span style="color:#000">encrypt&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">String&lt;/span> &lt;span style="color:#000">password&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// encryption logic
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">UserDTO&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#000">String&lt;/span> &lt;span style="color:#000">name&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">private&lt;/span> &lt;span style="color:#000">List&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">String&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">roles&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// standard getters and setters
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="references">References&lt;/h2>
&lt;p>&lt;a href="https://docs.microsoft.com/en-us/archive/msdn-magazine/2009/august/pros-and-cons-of-data-transfer-objects">Cutting Edge - Pros and Cons of Data Transfer Objects&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://docs.microsoft.com/en-us/aspnet/web-api/overview/data/using-web-api-with-entity-framework/part-5">Create Data Transfer Objects (DTOs)&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://andrewlock.net/preventing-mass-assignment-or-over-posting-in-asp-net-core/#:~:text=Mass%20assignment%2C%20also%20known%20as,not%20expect%20to%20be%20set.">Preventing mass assignment or over posting in ASP.NET Core&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.baeldung.com/java-dto-pattern">The DTO Pattern&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.hanselman.com/blog/aspnet-overpostingmass-assignment-model-binding-security">ASP.NET - Overposting/Mass Assignment Model Binding Security&lt;/a>&lt;/p></description></item></channel></rss>